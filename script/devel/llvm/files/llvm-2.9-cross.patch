diff -Naur llvm-2.9-old/autoconf/configure.ac llvm-2.9-new/autoconf/configure.ac
--- llvm-2.9-old/autoconf/configure.ac	2011-03-25 00:56:32.000000000 -0700
+++ llvm-2.9-new/autoconf/configure.ac	2011-05-05 13:33:38.000000000 -0700
@@ -384,6 +384,10 @@
        AC_CHECK_PROG(BUILD_CXX, c++, c++, , , /usr/ucb/c++)
      fi
   fi
+  AC_SUBST(BUILD_CPPFLAGS)
+  AC_SUBST(BUILD_CFLAGS)
+  AC_SUBST(BUILD_CXXFLAGS)
+  AC_SUBST(BUILD_LDFLAGS)
 else
   AC_SUBST(LLVM_CROSS_COMPILING, [0])
 fi
diff -Naur llvm-2.9-old/autoconf/m4/build_exeext.m4 llvm-2.9-new/autoconf/m4/build_exeext.m4
--- llvm-2.9-old/autoconf/m4/build_exeext.m4	2008-09-26 10:27:58.000000000 -0700
+++ llvm-2.9-new/autoconf/m4/build_exeext.m4	2011-05-05 12:29:10.000000000 -0700
@@ -18,7 +18,7 @@
      fi
   fi
   test -z "$BUILD_CC" && AC_MSG_ERROR([no acceptable cc found in \$PATH])
-  ac_build_link='${BUILD_CC-cc} -o conftest $CFLAGS $CPPFLAGS $LDFLAGS conftest.$ac_ext $LIBS 1>&AS_MESSAGE_LOG_FD'
+  ac_build_link='${BUILD_CC-cc} -o conftest $BUILD_CFLAGS $BUILD_CPPFLAGS $BUILD_LDFLAGS conftest.$ac_ext $LIBS 1>&AS_MESSAGE_LOG_FD'
   rm -f conftest*
   echo 'int main () { return 0; }' > conftest.$ac_ext
   ac_cv_build_exeext=
diff -Naur llvm-2.9-old/Makefile llvm-2.9-new/Makefile
--- llvm-2.9-old/Makefile	2010-11-29 10:16:10.000000000 -0800
+++ llvm-2.9-new/Makefile	2011-05-05 13:35:06.000000000 -0700
@@ -104,37 +104,6 @@
   DIRS := $(filter-out unittests, $(DIRS))
 endif
 
-# If we're cross-compiling, build the build-hosted tools first
-ifeq ($(LLVM_CROSS_COMPILING),1)
-all:: cross-compile-build-tools
-
-clean::
-	$(Verb) rm -rf BuildTools
-
-cross-compile-build-tools:
-	$(Verb) if [ ! -f BuildTools/Makefile ]; then \
-          $(MKDIR) BuildTools; \
-	  cd BuildTools ; \
-	  unset CFLAGS ; \
-	  unset CXXFLAGS ; \
-	  $(PROJ_SRC_DIR)/configure --build=$(BUILD_TRIPLE) \
-		--host=$(BUILD_TRIPLE) --target=$(BUILD_TRIPLE); \
-	  cd .. ; \
-	fi; \
-	(unset SDKROOT; \
-	 $(MAKE) -C BuildTools \
-	  BUILD_DIRS_ONLY=1 \
-	  UNIVERSAL= \
-	  ENABLE_OPTIMIZED=$(ENABLE_OPTIMIZED) \
-	  ENABLE_PROFILING=$(ENABLE_PROFILING) \
-	  ENABLE_COVERAGE=$(ENABLE_COVERAGE) \
-	  DISABLE_ASSERTIONS=$(DISABLE_ASSERTIONS) \
-	  ENABLE_EXPENSIVE_CHECKS=$(ENABLE_EXPENSIVE_CHECKS) \
-	  CFLAGS= \
-	  CXXFLAGS= \
-	) || exit 1;
-endif
-
 # Include the main makefile machinery.
 include $(LLVM_SRC_ROOT)/Makefile.rules
 
diff -Naur llvm-2.9-old/Makefile.config.in llvm-2.9-new/Makefile.config.in
--- llvm-2.9-old/Makefile.config.in	2010-12-28 19:59:14.000000000 -0800
+++ llvm-2.9-new/Makefile.config.in	2011-05-05 12:25:34.000000000 -0700
@@ -113,6 +113,10 @@
 # call if we're cross-compiling).
 BUILD_CC=@BUILD_CC@
 BUILD_CXX=@BUILD_CXX@
+BUILD_CPPFLAGS=@BUILD_CPPFLAGS@
+BUILD_CFLAGS=@BUILD_CFLAGS@
+BUILD_CXXFLAGS=@BUILD_CXXFLAGS@
+BUILD_LDFLAGS=@BUILD_LDFLAGS@
 
 # Triple for configuring build tools when cross-compiling
 BUILD_TRIPLE=@build@
diff -Naur llvm-2.9-old/Makefile.rules llvm-2.9-new/Makefile.rules
--- llvm-2.9-old/Makefile.rules	2011-03-24 23:26:58.000000000 -0700
+++ llvm-2.9-new/Makefile.rules	2011-05-05 12:24:42.000000000 -0700
@@ -647,15 +647,15 @@
 	         $(CPP.BaseFlags)
 
 ifeq ($(BUILD_COMPONENT), 1)
-  Compile.C     = $(BUILD_CC) $(CPP.Flags) $(C.Flags) $(CFLAGS) $(CPPFLAGS) \
+  Compile.C     = $(BUILD_CC) $(CPP.Flags) $(C.Flags) $(BUILD_CFLAGS) $(BUILD_CPPFLAGS) \
                   $(TargetCommonOpts) $(CompileCommonOpts) -c
-  Compile.CXX   = $(BUILD_CXX) $(CPP.Flags) $(CXX.Flags) $(CXXFLAGS) \
+  Compile.CXX   = $(BUILD_CXX) $(CPP.Flags) $(CXX.Flags) $(BUILD_CXXFLAGS) \
 		  $(CPPFLAGS) \
                   $(TargetCommonOpts) $(CompileCommonOpts) -c
-  Preprocess.CXX= $(BUILD_CXX) $(CPP.Flags) $(CPPFLAGS) $(TargetCommonOpts) \
+  Preprocess.CXX= $(BUILD_CXX) $(CPP.Flags) $(BUILD_CPPFLAGS) $(TargetCommonOpts) \
                   $(CompileCommonOpts) $(CXX.Flags) -E
-  Link          = $(BUILD_CXX) $(CPP.Flags) $(CXX.Flags) $(CXXFLAGS) \
-		  $(LD.Flags) $(LDFLAGS) \
+  Link          = $(BUILD_CXX) $(CPP.Flags) $(CXX.Flags) $(BUILD_CXXFLAGS) \
+		  $(LD.Flags) $(BUILD_LDFLAGS) \
                   $(TargetCommonOpts) $(CompileCommonOpts) $(Strip)
 else
   Compile.C     = $(CC) $(CPP.Flags) $(C.Flags) $(CFLAGS) $(CPPFLAGS) \
