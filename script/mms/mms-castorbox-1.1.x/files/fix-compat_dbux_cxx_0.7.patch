=== modified file 'plugins/feature/dbus/dbus.cpp'
--- old/plugins/feature/dbus/dbus.cpp	2009-08-01 16:09:05 +0000
+++ new/plugins/feature/dbus/dbus.cpp	2010-09-23 21:57:00 +0000
@@ -3,14 +3,23 @@
 #include <dbus-cxx.h>
 #include <iostream>
 
-MMS_Dbus::MMS_Dbus()
+MMS_Dbus::MMS_Dbus() : connected(false)
 {}
 
 void MMS_Dbus::startup_updater() 
 {
-
+  S_BackgroundUpdater::get_instance()->run_once(boost::bind(&MMS_Dbus::connect, this));
+}
+
+void MMS_Dbus::connect() 
+{
+
+  if (connected)
+	return;
+  
   DBus::init();
-  DBus::Connection::pointer conn = dispatcher.create_connection(DBus::BUS_SYSTEM);
+  DBus::Dispatcher::pointer dispatcher = DBus::Dispatcher::create();
+  DBus::Connection::pointer conn = dispatcher->create_connection( DBus::BUS_SESSION );
 
   if (!conn->is_connected()) {
 	std::cout << "MMS_Dbus::startup_udater() conection failed" << std::endl;
@@ -20,19 +29,20 @@
   // request a name on the bus
   int ret = conn->request_name( "org.mymediasystem.service", DBUS_NAME_FLAG_REPLACE_EXISTING );
   if (DBUS_REQUEST_NAME_REPLY_PRIMARY_OWNER != ret) 
-	return;
+	return ;
   std::cout << "DBUS: Dbus request ok!" << std::endl;
+  connected = true;
   DBus::Object::pointer object = conn->create_object("/org/mymediasystem/service/notify");
 
   object->create_method<std::string,std::string,std::string,std::string,std::string>("show", sigc::mem_fun(this, &MMS_Dbus::Notify) );
   
-  dispatcher.start();
+  dispatcher->start();
   std::cout << "MMS_Dbus::startup_udater() end " << std::endl;
 }
 
 MMS_Dbus::~MMS_Dbus()
 {
-  dispatcher.stop();
+//  dispatcher->stop();
 }
 
 #ifdef use_notify_area

=== modified file 'plugins/feature/dbus/dbus.hpp'
--- old/plugins/feature/dbus/dbus.hpp	2009-06-23 02:58:53 +0000
+++ new/plugins/feature/dbus/dbus.hpp	2010-09-23 18:58:28 +0000
@@ -17,7 +17,9 @@
 {
 private:
 
-  DBus::Dispatcher dispatcher;
+  bool connected;
+
+  DBus::Dispatcher::pointer dispatcher;
   DBus::HandlerResult print( DBus::SignalMessage::const_pointer );
 
 #ifdef use_notify_area
@@ -33,6 +35,7 @@
   }
 
   void startup_updater();
+  void connect();
 
   std::string mainloop()
   {

