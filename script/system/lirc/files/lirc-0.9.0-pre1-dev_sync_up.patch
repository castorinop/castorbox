From 2f41e81718987ca121e2c316a4a4b89e127ebce7 Mon Sep 17 00:00:00 2001
From: Jarod Wilson <jarod@redhat.com>
Date: Wed, 20 Oct 2010 01:56:02 -0400
Subject: [PATCH 1/1] lirc_dev: sync up more with what's in-kernel now

Signed-off-by: Jarod Wilson <jarod@redhat.com>
---
 drivers/lirc_dev/lirc_dev.c |  336 +++++++++++++++++++------------------------
 drivers/lirc_dev/lirc_dev.h |   67 +++++----
 2 files changed, 189 insertions(+), 214 deletions(-)

diff --git a/drivers/lirc_dev/lirc_dev.c b/drivers/lirc_dev/lirc_dev.c
index 6070ebf..bdd6b96 100644
--- a/drivers/lirc_dev/lirc_dev.c
+++ b/drivers/lirc_dev/lirc_dev.c
@@ -1,7 +1,7 @@
 /*
  * LIRC base driver
  *
- * (L) by Artur Lipowski <alipowski@interia.pl>
+ * by by Artur Lipowski <alipowski@interia.pl>
  *
  *  This program is free software; you can redistribute it and/or modify
  *  it under the terms of the GNU General Public License as published by
@@ -17,14 +17,8 @@
  *  along with this program; if not, write to the Free Software
  *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  *
- * $Id: lirc_dev.c,v 1.107 2010/08/17 21:03:23 jarodwilson Exp $
- *
  */
 
-#ifdef HAVE_CONFIG_H
-# include <config.h>
-#endif
-
 #include <linux/version.h>
 
 #if LINUX_VERSION_CODE < KERNEL_VERSION(2, 6, 33)
@@ -37,20 +31,17 @@
 #include <linux/ioctl.h>
 #include <linux/fs.h>
 #include <linux/poll.h>
-#include <linux/smp_lock.h>
 #include <linux/completion.h>
-#include <linux/uaccess.h>
 #include <linux/errno.h>
-#define __KERNEL_SYSCALLS__
+#include <linux/mutex.h>
+#include <linux/wait.h>
 #include <linux/unistd.h>
 #if LINUX_VERSION_CODE >= KERNEL_VERSION(2, 6, 23)
 #include <linux/kthread.h>
 #endif
-
-/* SysFS header */
-#ifdef LIRC_HAVE_SYSFS
+#include <linux/bitops.h>
 #include <linux/device.h>
-#endif
+#include <linux/cdev.h>
 
 #include "drivers/kcompat.h"
 #if LINUX_VERSION_CODE > KERNEL_VERSION(2, 6, 35)
@@ -68,16 +59,18 @@ static int debug;
 			printk(KERN_DEBUG fmt, ## args);	\
 	} while (0)
 
-#define IRCTL_DEV_NAME    "BaseRemoteCtl"
-#define NOPLUG            -1
-#define LOGHEAD           "lirc_dev (%s[%d]): "
+#define IRCTL_DEV_NAME	"BaseRemoteCtl"
+#define NOPLUG		-1
+#define LOGHEAD		"lirc_dev (%s[%d]): "
+
+static dev_t lirc_base_dev;
 
 struct irctl {
 	struct lirc_driver d;
 	int attached;
 	int open;
 
-	struct mutex buffer_lock;
+	struct mutex irctl_lock;
 	struct lirc_buffer *buf;
 	unsigned int chunk_size;
 
@@ -95,17 +88,17 @@ struct irctl {
 static DEFINE_MUTEX(lirc_dev_lock);
 
 static struct irctl *irctls[MAX_IRCTL_DEVICES];
-static struct file_operations lirc_dev_fops;
+static struct cdev cdevs[MAX_IRCTL_DEVICES];
 
 /* Only used for sysfs but defined to void otherwise */
-static lirc_class_t *lirc_class;
+static struct class *lirc_class;
 
 /*  helper function
  *  initializes the irctl structure
  */
 static void lirc_irctl_init(struct irctl *ir)
 {
-	mutex_init(&ir->buffer_lock);
+	mutex_init(&ir->irctl_lock);
 	ir->d.minor = NOPLUG;
 #if LINUX_VERSION_CODE < KERNEL_VERSION(2, 6, 23)
 	ir->tpid = -1;
@@ -116,6 +109,8 @@ static void lirc_irctl_cleanup(struct irctl *ir)
 {
 	dprintk(LOGHEAD "cleaning up\n", ir->d.name, ir->d.minor);
 
+	device_destroy(lirc_class, MKDEV(MAJOR(lirc_base_dev), ir->d.minor));
+
 	if (ir->buf != ir->d.rbuf) {
 		lirc_buffer_free(ir->buf);
 		kfree(ir->buf);
@@ -137,8 +132,11 @@ static int lirc_add_to_buf(struct irctl *ir)
 		 * service the device as long as it is returning
 		 * data and we have space
 		 */
-		while ((res = ir->d.add_to_buf(ir->d.data, ir->buf)) == 0) {
+get_data:
+		res = ir->d.add_to_buf(ir->d.data, ir->buf);
+		if (res == 0) {
 			got_data++;
+			goto get_data;
 		}
 
 		if (res == -ENODEV)
@@ -213,11 +211,51 @@ static int lirc_thread(void *irctl)
 	return 0;
 }
 
+static struct file_operations lirc_dev_fops = {
+	.owner		= THIS_MODULE,
+	.read		= lirc_dev_fop_read,
+	.write		= lirc_dev_fop_write,
+	.poll		= lirc_dev_fop_poll,
+#if LINUX_VERSION_CODE < KERNEL_VERSION(2, 6, 35)
+	.ioctl		= lirc_dev_fop_ioctl,
+#else
+	.unlocked_ioctl	= lirc_dev_fop_ioctl,
+#ifdef CONFIG_COMPAT
+	.compat_ioctl	= lirc_dev_fop_ioctl,
+#endif
+#endif
+	.open		= lirc_dev_fop_open,
+	.release	= lirc_dev_fop_close,
+};
+
+static int lirc_cdev_add(struct irctl *ir)
+{
+	int retval;
+	struct lirc_driver *d = &ir->d;
+	struct cdev *cdev = &cdevs[d->minor];
+ 
+	if (d->fops) {
+		cdev_init(cdev, d->fops);
+		cdev->owner = d->owner;
+	} else {
+		cdev_init(cdev, &lirc_dev_fops);
+		cdev->owner = THIS_MODULE;
+	}
+	kobject_set_name(&cdev->kobj, "lirc%d", d->minor);
+
+	retval = cdev_add(cdev, MKDEV(MAJOR(lirc_base_dev), d->minor), 1);
+	if (retval)
+		kobject_put(&cdev->kobj);
+
+	return retval;
+}
+
 int lirc_register_driver(struct lirc_driver *d)
 {
 	struct irctl *ir;
 	int minor;
 	int bytes_in_key;
+	unsigned int chunk_size;
 	unsigned int buffer_size;
 	int err;
 	DECLARE_COMPLETION(tn);
@@ -342,8 +380,10 @@ int lirc_register_driver(struct lirc_driver *d)
 	/* some safety check 8-) */
 	d->name[sizeof(d->name)-1] = '\0';
 
-	bytes_in_key = d->code_length/8 + (d->code_length%8 ? 1 : 0);
+	bytes_in_key = BITS_TO_LONGS(d->code_length) +
+			(d->code_length % 8 ? 1 : 0);
 	buffer_size = d->buffer_size ? d->buffer_size : BUFLEN / bytes_in_key;
+	chunk_size  = d->chunk_size  ? d->chunk_size  : bytes_in_key;
 
 	if (d->rbuf) {
 		ir->buf = d->rbuf;
@@ -353,7 +393,7 @@ int lirc_register_driver(struct lirc_driver *d)
 			err = -ENOMEM;
 			goto out_lock;
 		}
-		err = lirc_buffer_init(ir->buf, bytes_in_key, buffer_size);
+		err = lirc_buffer_init(ir->buf, chunk_size, buffer_size);
 		if (err) {
 			kfree(ir->buf);
 			goto out_lock;
@@ -366,14 +406,9 @@ int lirc_register_driver(struct lirc_driver *d)
 
 	ir->d = *d;
 
-#ifdef LIRC_HAVE_DEVFS_26
-	devfs_mk_cdev(MKDEV(IRCTL_DEV_MAJOR, ir->d.minor),
-			S_IFCHR|S_IRUSR|S_IWUSR,
-			DEV_LIRC "/%u", ir->d.minor);
-#endif
-	(void) lirc_device_create(lirc_class, ir->d.dev,
-				  MKDEV(IRCTL_DEV_MAJOR, ir->d.minor), NULL,
-				  "lirc%u", ir->d.minor);
+	device_create(lirc_class, ir->d.dev,
+		      MKDEV(MAJOR(lirc_base_dev), ir->d.minor), NULL,
+		      "lirc%u", ir->d.minor);
 
 #ifndef LIRC_REMOVE_DURING_EXPORT
 	if (d->sample_rate || d->get_queue) {
@@ -400,20 +435,20 @@ int lirc_register_driver(struct lirc_driver *d)
 		ir->t_notify = NULL;
 #endif
 	}
+
+	err = lirc_cdev_add(ir);
+	if (err)
+		goto out_sysfs;
+
 	ir->attached = 1;
 	mutex_unlock(&lirc_dev_lock);
 
 	dprintk("lirc_dev: driver %s registered at minor number = %d\n",
 		ir->d.name, ir->d.minor);
-	d->minor = minor;
 	return minor;
 
 out_sysfs:
-	lirc_device_destroy(lirc_class,
-			    MKDEV(IRCTL_DEV_MAJOR, ir->d.minor));
-#ifdef LIRC_HAVE_DEVFS_26
-	devfs_remove(DEV_LIRC "/%i", ir->d.minor);
-#endif
+	device_destroy(lirc_class, MKDEV(MAJOR(lirc_base_dev), ir->d.minor));
 out_lock:
 	mutex_unlock(&lirc_dev_lock);
 out:
@@ -424,6 +459,7 @@ EXPORT_SYMBOL(lirc_register_driver);
 int lirc_unregister_driver(int minor)
 {
 	struct irctl *ir;
+	struct cdev *cdev;
 #if LINUX_VERSION_CODE < KERNEL_VERSION(2, 6, 23)
 	DECLARE_COMPLETION(tn);
 	DECLARE_COMPLETION(tn2);
@@ -444,6 +480,8 @@ int lirc_unregister_driver(int minor)
 		return -ENOENT;
 	}
 
+	cdev = &cdevs[minor];
+
 	mutex_lock(&lirc_dev_lock);
 
 	if (ir->d.minor != minor) {
@@ -483,31 +521,27 @@ int lirc_unregister_driver(int minor)
 		dprintk(LOGHEAD "releasing opened driver\n",
 			ir->d.name, ir->d.minor);
 		wake_up_interruptible(&ir->buf->wait_poll);
-		mutex_lock(&ir->buffer_lock);
+		mutex_lock(&ir->irctl_lock);
 		ir->d.set_use_dec(ir->d.data);
-		module_put(ir->d.owner);
-		mutex_unlock(&ir->buffer_lock);
+		module_put(cdev->owner);
+		mutex_unlock(&ir->irctl_lock);
 	} else {
 		lirc_irctl_cleanup(ir);
-		irctls[minor] = NULL;
+		cdev_del(cdev);
 		kfree(ir);
+		irctls[minor] = NULL;
 	}
 
-#ifdef LIRC_HAVE_DEVFS_26
-	devfs_remove(DEV_LIRC "/%u", ir->d.minor);
-#endif
-	lirc_device_destroy(lirc_class,
-			    MKDEV(IRCTL_DEV_MAJOR, ir->d.minor));
-
 	mutex_unlock(&lirc_dev_lock);
 
 	return 0;
 }
 EXPORT_SYMBOL(lirc_unregister_driver);
 
-static int irctl_open(struct inode *inode, struct file *file)
+int lirc_dev_fop_open(struct inode *inode, struct file *file)
 {
 	struct irctl *ir;
+	struct cdev *cdev;
 	int retval = 0;
 
 	if (iminor(inode) >= MAX_IRCTL_DEVICES || !irctls[iminor(inode)]) {
@@ -516,6 +550,9 @@ static int irctl_open(struct inode *inode, struct file *file)
 		return -ENODEV;
 	}
 
+	if (mutex_lock_interruptible(&lirc_dev_lock))
+		return -ERESTARTSYS;
+
 	ir = irctls[iminor(inode)];
 	if (!ir) {
 		retval = -ENODEV;
@@ -524,13 +561,6 @@ static int irctl_open(struct inode *inode, struct file *file)
 
 	dprintk(LOGHEAD "open called\n", ir->d.name, ir->d.minor);
 
-	/* if the driver has an open function use it instead */
-	if (ir->d.fops && ir->d.fops->open)
-		return ir->d.fops->open(inode, file);
-
-	if (mutex_lock_interruptible(&lirc_dev_lock))
-		return -ERESTARTSYS;
-
 	if (ir->d.minor == NOPLUG) {
 		retval = -ENODEV;
 		goto error;
@@ -541,13 +571,14 @@ static int irctl_open(struct inode *inode, struct file *file)
 		goto error;
 	}
 
-	if (try_module_get(ir->d.owner)) {
-		++ir->open;
+	cdev = &cdevs[iminor(inode)];
+	if (try_module_get(cdev->owner)) {
+		ir->open++;
 		retval = ir->d.set_use_inc(ir->d.data);
 
 		if (retval) {
-			module_put(ir->d.owner);
-			--ir->open;
+			module_put(cdev->owner);
+			ir->open--;
 		} else {
 			lirc_buffer_clear(ir->buf);
 		}
@@ -566,7 +597,7 @@ static int irctl_open(struct inode *inode, struct file *file)
 		retval = -ENODEV;
 	}
 
- error:
+error:
 	if (ir)
 		dprintk(LOGHEAD "open result = %d\n", ir->d.name, ir->d.minor,
 			retval);
@@ -575,10 +606,12 @@ static int irctl_open(struct inode *inode, struct file *file)
 
 	return retval;
 }
+EXPORT_SYMBOL(lirc_dev_fop_open);
 
-static int irctl_close(struct inode *inode, struct file *file)
+int lirc_dev_fop_close(struct inode *inode, struct file *file)
 {
 	struct irctl *ir = irctls[iminor(inode)];
+	struct cdev *cdev = &cdevs[iminor(inode)];
 
 	if (!ir) {
 		printk(KERN_ERR "%s: called with invalid irctl\n", __func__);
@@ -587,19 +620,15 @@ static int irctl_close(struct inode *inode, struct file *file)
 
 	dprintk(LOGHEAD "close called\n", ir->d.name, ir->d.minor);
 
-	/* if the driver has a close function use it instead */
-	if (ir->d.fops && ir->d.fops->release)
-		return ir->d.fops->release(inode, file);
-
-	if (mutex_lock_interruptible(&lirc_dev_lock))
-		return -ERESTARTSYS;
+	WARN_ON(mutex_lock_interruptible(&lirc_dev_lock));
 
 	ir->open--;
 	if (ir->attached) {
 		ir->d.set_use_dec(ir->d.data);
-		module_put(ir->d.owner);
+		module_put(cdev->owner);
 	} else {
 		lirc_irctl_cleanup(ir);
+		cdev_del(cdev);
 		irctls[ir->d.minor] = NULL;
 		kfree(ir);
 	}
@@ -608,8 +637,9 @@ static int irctl_close(struct inode *inode, struct file *file)
 
 	return 0;
 }
+EXPORT_SYMBOL(lirc_dev_fop_close);
 
-static unsigned int irctl_poll(struct file *file, poll_table *wait)
+unsigned int lirc_dev_fop_poll(struct file *file, poll_table *wait)
 {
 	struct irctl *ir = irctls[iminor(file->f_dentry->d_inode)];
 	unsigned int ret;
@@ -621,40 +651,39 @@ static unsigned int irctl_poll(struct file *file, poll_table *wait)
 
 	dprintk(LOGHEAD "poll called\n", ir->d.name, ir->d.minor);
 
-	/* if the driver has a poll function use it instead */
-	if (ir->d.fops && ir->d.fops->poll)
-		return ir->d.fops->poll(file, wait);
-
-	mutex_lock(&ir->buffer_lock);
-	if (!ir->attached) {
-		mutex_unlock(&ir->buffer_lock);
+	if (!ir->attached)
 		return POLLERR;
-	}
 
 	poll_wait(file, &ir->buf->wait_poll, wait);
 
+	if (ir->buf)
+		if (lirc_buffer_empty(ir->buf))
+			ret = 0;
+		else
+			ret = POLLIN | POLLRDNORM;
+	else
+		ret = POLLERR;
+
 	dprintk(LOGHEAD "poll result = %s\n",
 		ir->d.name, ir->d.minor,
 		lirc_buffer_empty(ir->buf) ? "0" : "POLLIN|POLLRDNORM");
 
-	ret = lirc_buffer_empty(ir->buf) ? 0 : (POLLIN|POLLRDNORM);
-
-	mutex_unlock(&ir->buffer_lock);
 	return ret;
 }
+EXPORT_SYMBOL(lirc_dev_fop_poll);
 
 /*
  *
  */
 #if LINUX_VERSION_CODE < KERNEL_VERSION(2, 6, 35)
-static int irctl_ioctl(struct inode *inode, struct file *file,
+int lirc_dev_fop_ioctl(struct inode *inode, struct file *file,
 		       unsigned int cmd, unsigned long arg)
 #else
-static long irctl_ioctl(struct file *file, unsigned int cmd, unsigned long arg)
+long lirc_dev_fop_ioctl(struct file *file, unsigned int cmd, unsigned long arg)
 #endif
 {
 	__u32 mode;
-	int result;
+	int result = 0;
 #if LINUX_VERSION_CODE < KERNEL_VERSION(2, 6, 35)
 	struct irctl *ir = irctls[iminor(inode)];
 #else
@@ -669,26 +698,13 @@ static long irctl_ioctl(struct file *file, unsigned int cmd, unsigned long arg)
 	dprintk(LOGHEAD "ioctl called (0x%x)\n",
 		ir->d.name, ir->d.minor, cmd);
 
-	/* if the driver has a ioctl function use it instead */
-#if LINUX_VERSION_CODE < KERNEL_VERSION(2, 6, 35)
-	if (ir->d.fops && ir->d.fops->ioctl) {
-		result = ir->d.fops->ioctl(inode, file, cmd, arg);
-#else
-	if (ir->d.fops && ir->d.fops->unlocked_ioctl) {
-		result = ir->d.fops->unlocked_ioctl(file, cmd, arg);
-#endif
-		if (result != -ENOIOCTLCMD)
-			return result;
-	}
-
 	if (ir->d.minor == NOPLUG || !ir->attached) {
 		dprintk(LOGHEAD "ioctl result = -ENODEV\n",
 			ir->d.name, ir->d.minor);
 		return -ENODEV;
 	}
 
-	/* The driver can't handle cmd */
-	result = 0;
+	mutex_lock(&ir->irctl_lock);
 
 	switch (cmd) {
 	case LIRC_GET_FEATURES:
@@ -702,14 +718,14 @@ static long irctl_ioctl(struct file *file, unsigned int cmd, unsigned long arg)
 		    ir->d.min_timeout == 0)
 			return -ENOSYS;
 
-		result = put_user(ir->d.min_timeout, (lirc_t *) arg);
+		result = put_user(ir->d.min_timeout, (__u32 *) arg);
 		break;
 	case LIRC_GET_MAX_TIMEOUT:
 		if (!(ir->d.features & LIRC_CAN_SET_REC_TIMEOUT) ||
 		    ir->d.max_timeout == 0)
 			return -ENOSYS;
 
-		result = put_user(ir->d.max_timeout, (lirc_t *) arg);
+		result = put_user(ir->d.max_timeout, (__u32 *) arg);
 		break;
 	case LIRC_GET_REC_MODE:
 		if (!(ir->d.features & LIRC_CAN_REC_MASK))
@@ -749,24 +765,16 @@ static long irctl_ioctl(struct file *file, unsigned int cmd, unsigned long arg)
 		result = -EINVAL;
 	}
 
-	switch (cmd) {
-	case LIRC_SET_REC_MODE:
-	case LIRC_SET_SEND_MODE:
-		printk(KERN_NOTICE LOGHEAD "userspace uses outdated ioctl "
-			"please update your lirc installation\n",
-			ir->d.name, ir->d.minor);
-		break;
-	default:
-		break;
-	}
-
 	dprintk(LOGHEAD "ioctl result = %d\n",
 		ir->d.name, ir->d.minor, result);
 
+	mutex_unlock(&ir->irctl_lock);
+
 	return result;
 }
+EXPORT_SYMBOL(lirc_dev_fop_ioctl);
 
-static ssize_t irctl_read(struct file *file,
+ssize_t lirc_dev_fop_read(struct file *file,
 			  char *buffer,
 			  size_t length,
 			  loff_t *ppos)
@@ -774,7 +782,6 @@ static ssize_t irctl_read(struct file *file,
 	struct irctl *ir = irctls[iminor(file->f_dentry->d_inode)];
 	unsigned char *buf;
 	int ret = 0, written = 0;
-	int unlock = 1;
 	DECLARE_WAITQUEUE(wait, current);
 
 	if (!ir) {
@@ -788,21 +795,17 @@ static ssize_t irctl_read(struct file *file,
 	if (!buf)
 		return -ENOMEM;
 
-	/* if the driver has a specific read function use it instead */
-	if (ir->d.fops && ir->d.fops->read)
-		return ir->d.fops->read(file, buffer, length, ppos);
-
-	if (mutex_lock_interruptible(&ir->buffer_lock))
+	if (mutex_lock_interruptible(&ir->irctl_lock))
 		return -ERESTARTSYS;
 	if (!ir->attached) {
-		mutex_unlock(&ir->buffer_lock);
+		mutex_unlock(&ir->irctl_lock);
 		return -ENODEV;
 	}
 
-	if (length % ir->buf->chunk_size) {
+	if (length % ir->chunk_size) {
 		dprintk(LOGHEAD "read result = -EINVAL\n",
 			ir->d.name, ir->d.minor);
-		mutex_unlock(&ir->buffer_lock);
+		mutex_unlock(&ir->irctl_lock);
 		return -EINVAL;
 	}
 
@@ -835,14 +838,15 @@ static ssize_t irctl_read(struct file *file,
 				break;
 			}
 
-			mutex_unlock(&ir->buffer_lock);
+			mutex_unlock(&ir->irctl_lock);
 			schedule();
 			set_current_state(TASK_INTERRUPTIBLE);
 
-			if (mutex_lock_interruptible(&ir->buffer_lock)) {
-				unlock = 0;
+			if (mutex_lock_interruptible(&ir->irctl_lock)) {
 				ret = -ERESTARTSYS;
-				break;
+				remove_wait_queue(&ir->buf->wait_poll, &wait);
+				set_current_state(TASK_RUNNING);
+				goto out_unlocked;
 			}
 
 			if (!ir->attached) {
@@ -859,15 +863,17 @@ static ssize_t irctl_read(struct file *file,
 
 	remove_wait_queue(&ir->buf->wait_poll, &wait);
 	set_current_state(TASK_RUNNING);
-	if(unlock) mutex_unlock(&ir->buffer_lock);
 
-	dprintk(LOGHEAD "read result = %s (%d)\n",
-		ir->d.name, ir->d.minor, ret ? "-EFAULT" : "OK", ret);
+	mutex_unlock(&ir->irctl_lock);
 
+out_unlocked:
 	kfree(buf);
+	dprintk(LOGHEAD "read result = %s (%d)\n",
+		ir->d.name, ir->d.minor, ret ? "-EFAULT" : "OK", ret);
 
 	return ret ? ret : written;
 }
+EXPORT_SYMBOL(lirc_dev_fop_read);
 
 
 void *lirc_get_pdata(struct file *file)
@@ -886,7 +892,7 @@ void *lirc_get_pdata(struct file *file)
 EXPORT_SYMBOL(lirc_get_pdata);
 
 
-static ssize_t irctl_write(struct file *file, const char *buffer,
+ssize_t lirc_dev_fop_write(struct file *file, const char *buffer,
 			   size_t length, loff_t *ppos)
 {
 	struct irctl *ir = irctls[iminor(file->f_dentry->d_inode)];
@@ -898,84 +904,45 @@ static ssize_t irctl_write(struct file *file, const char *buffer,
 
 	dprintk(LOGHEAD "write called\n", ir->d.name, ir->d.minor);
 
-	/* if the driver has a specific read function use it instead */
-	if (ir->d.fops && ir->d.fops->write)
-		return ir->d.fops->write(file, buffer, length, ppos);
-
 	if (!ir->attached)
 		return -ENODEV;
 
 	return -EINVAL;
 }
+EXPORT_SYMBOL(lirc_dev_fop_write);
 
 
-static struct file_operations lirc_dev_fops = {
-	.owner		= THIS_MODULE,
-	.read		= irctl_read,
-	.write		= irctl_write,
-	.poll		= irctl_poll,
-#if LINUX_VERSION_CODE < KERNEL_VERSION(2, 6, 35)
-	.ioctl		= irctl_ioctl,
-#else
-	.unlocked_ioctl	= irctl_ioctl,
-	.compat_ioctl	= irctl_ioctl,
-#endif
-	.open		= irctl_open,
-	.release	= irctl_close
-};
-
-/* For now don't try to use it as a static version !  */
-#ifdef MODULE
-
 static int __init lirc_dev_init(void)
 {
-	if (register_chrdev(IRCTL_DEV_MAJOR, IRCTL_DEV_NAME, &lirc_dev_fops)) {
-		printk(KERN_ERR "lirc_dev: register_chrdev failed\n");
-		goto out;
-	}
+	int retval;
 
 	lirc_class = class_create(THIS_MODULE, "lirc");
 	if (IS_ERR(lirc_class)) {
+		retval = PTR_ERR(lirc_class);
 		printk(KERN_ERR "lirc_dev: class_create failed\n");
-		goto out_unregister;
+		goto error;
+	}
+
+	retval = alloc_chrdev_region(&lirc_base_dev, 0, MAX_IRCTL_DEVICES,
+				     IRCTL_DEV_NAME);
+	if (retval) {
+		class_destroy(lirc_class);
+		printk(KERN_ERR "lirc_dev: alloc_chrdev_region failed\n");
+		goto error;
 	}
 
 	printk(KERN_INFO "lirc_dev: IR Remote Control driver registered, "
 	       "major %d \n", IRCTL_DEV_MAJOR);
 
-	return 0;
-
-out_unregister:
-#if LINUX_VERSION_CODE < KERNEL_VERSION(2, 6, 23)
-	if (unregister_chrdev(IRCTL_DEV_MAJOR, IRCTL_DEV_NAME))
-		printk(KERN_ERR "lirc_dev: unregister_chrdev failed!\n");
-#else
-	/* unregister_chrdev returns void now */
-	unregister_chrdev(IRCTL_DEV_MAJOR, IRCTL_DEV_NAME);
-#endif
-out:
-	return -1;
+error:
+	return retval;
 }
 
 static void __exit lirc_dev_exit(void)
 {
-#if LINUX_VERSION_CODE < KERNEL_VERSION(2, 6, 23)
-	int ret;
-
-	ret = unregister_chrdev(IRCTL_DEV_MAJOR, IRCTL_DEV_NAME);
-	class_destroy(lirc_class);
-
-	if (ret)
-		printk(KERN_ERR "lirc_dev: error in "
-		       "module_unregister_chrdev: %d\n", ret);
-	else
-		dprintk("lirc_dev: module successfully unloaded\n");
-#else
-	/* unregister_chrdev returns void now */
-	unregister_chrdev(IRCTL_DEV_MAJOR, IRCTL_DEV_NAME);
 	class_destroy(lirc_class);
+	unregister_chrdev_region(lirc_base_dev, MAX_IRCTL_DEVICES);
 	dprintk("lirc_dev: module unloaded\n");
-#endif
 }
 
 module_init(lirc_dev_init);
@@ -984,9 +951,6 @@ module_exit(lirc_dev_exit);
 MODULE_DESCRIPTION("LIRC base driver module");
 MODULE_AUTHOR("Artur Lipowski");
 MODULE_LICENSE("GPL");
-MODULE_ALIAS_CHARDEV_MAJOR(IRCTL_DEV_MAJOR);
 
 module_param(debug, bool, S_IRUGO | S_IWUSR);
 MODULE_PARM_DESC(debug, "Enable debugging messages");
-
-#endif /* MODULE */
diff --git a/drivers/lirc_dev/lirc_dev.h b/drivers/lirc_dev/lirc_dev.h
index b2a969e..bd9c05a 100644
--- a/drivers/lirc_dev/lirc_dev.h
+++ b/drivers/lirc_dev/lirc_dev.h
@@ -1,11 +1,9 @@
 /*
  * LIRC base driver
  *
- * (L) by Artur Lipowski <alipowski@interia.pl>
+ * by Artur Lipowski <alipowski@interia.pl>
  *        This code is licensed under GNU GPL
  *
- * $Id: lirc_dev.h,v 1.41 2010/04/25 08:33:52 lirc Exp $
- *
  */
 
 #ifndef _LINUX_LIRC_DEV_H
@@ -18,6 +16,8 @@
 
 #include <linux/slab.h>
 #include <linux/fs.h>
+#include <linux/ioctl.h>
+#include <linux/poll.h>
 #include <linux/kfifo.h>
 
 #include "drivers/lirc.h"
@@ -33,8 +33,8 @@ struct lirc_buffer {
 	struct kfifo *fifo;
 #else
 	struct kfifo fifo;
-	u8 fifo_initialized;
 #endif
+	u8 fifo_initialized;
 };
 
 static inline void lirc_buffer_clear(struct lirc_buffer *buf)
@@ -49,9 +49,12 @@ static inline void lirc_buffer_clear(struct lirc_buffer *buf)
 		spin_lock_irqsave(&buf->fifo_lock, flags);
 		kfifo_reset(&buf->fifo);
 		spin_unlock_irqrestore(&buf->fifo_lock, flags);
-	}
+	} else
+		WARN(1, "calling %s on an uninitialized lirc_buffer\n",
+		     __func__);
 #endif
 }
+
 static inline int lirc_buffer_init(struct lirc_buffer *buf,
 				    unsigned int chunk_size,
 				    unsigned int size)
@@ -74,6 +77,7 @@ static inline int lirc_buffer_init(struct lirc_buffer *buf,
 
 	return ret;
 }
+
 static inline void lirc_buffer_free(struct lirc_buffer *buf)
 {
 #if LINUX_VERSION_CODE < KERNEL_VERSION(2, 6, 33)
@@ -83,7 +87,9 @@ static inline void lirc_buffer_free(struct lirc_buffer *buf)
 	if (buf->fifo_initialized) {
 		kfifo_free(&buf->fifo);
 		buf->fifo_initialized = 0;
-	}
+	} else
+		WARN(1, "calling %s on an uninitialized lirc_buffer\n",
+		     __func__);
 #endif
 }
 
@@ -103,17 +109,17 @@ static inline int lirc_buffer_len(struct lirc_buffer *buf)
 #endif
 }
 
-static inline int  lirc_buffer_full(struct lirc_buffer *buf)
+static inline int lirc_buffer_full(struct lirc_buffer *buf)
 {
 	return lirc_buffer_len(buf) == buf->size * buf->chunk_size;
 }
 
-static inline int  lirc_buffer_empty(struct lirc_buffer *buf)
+static inline int lirc_buffer_empty(struct lirc_buffer *buf)
 {
 	return !lirc_buffer_len(buf);
 }
 
-static inline int  lirc_buffer_available(struct lirc_buffer *buf)
+static inline int lirc_buffer_available(struct lirc_buffer *buf)
 {
 	return buf->size - (lirc_buffer_len(buf) / buf->chunk_size);
 }
@@ -132,12 +138,13 @@ static inline unsigned int lirc_buffer_read(struct lirc_buffer *buf,
 #endif
 
 	return ret;
+
 }
 
 static inline unsigned int lirc_buffer_write(struct lirc_buffer *buf,
 					     unsigned char *orig)
 {
-	unsigned int ret = 0;
+	unsigned int ret;
 
 #if LINUX_VERSION_CODE < KERNEL_VERSION(2, 6, 33)
 	ret = kfifo_put(buf->fifo, orig, buf->chunk_size);
@@ -149,21 +156,6 @@ static inline unsigned int lirc_buffer_write(struct lirc_buffer *buf,
 	return ret;
 }
 
-static inline unsigned int lirc_buffer_write_n(struct lirc_buffer *buf,
-					       unsigned char *orig, int count)
-{
-	unsigned int ret = 0;
-
-#if LINUX_VERSION_CODE < KERNEL_VERSION(2, 6, 33)
-	ret = kfifo_put(buf->fifo, orig, count * buf->chunk_size);
-#else
-	ret = kfifo_in_locked(&buf->fifo, orig, count * buf->chunk_size,
-			      &buf->fifo_lock);
-#endif
-
-	return ret;
-}
-
 struct lirc_driver {
 	char name[40];
 	int minor;
@@ -171,9 +163,12 @@ struct lirc_driver {
 	unsigned int buffer_size; /* in chunks holding one code each */
 	int sample_rate;
 	__u32 features;
+
+	unsigned int chunk_size;
+
 	void *data;
-	lirc_t min_timeout;
-	lirc_t max_timeout;
+	int min_timeout;
+	int max_timeout;
 	int (*add_to_buf) (void *data, struct lirc_buffer *buf);
 #ifndef LIRC_REMOVE_DURING_EXPORT
 	wait_queue_head_t* (*get_queue) (void *data);
@@ -197,7 +192,6 @@ struct lirc_driver {
  * code_length:
  * length of the remote control key code expressed in bits
  *
- * sample_rate:
  * sample_rate equal to 0 means that no polling will be performed and
  * add_to_buf will be triggered by external events (through task queue
  * returned by get_queue)
@@ -259,4 +253,21 @@ extern int lirc_unregister_driver(int minor);
  */
 void *lirc_get_pdata(struct file *file);
 
+/* default file operations
+ * used by drivers if they override only some operations
+ */
+int lirc_dev_fop_open(struct inode *inode, struct file *file);
+int lirc_dev_fop_close(struct inode *inode, struct file *file);
+unsigned int lirc_dev_fop_poll(struct file *file, poll_table *wait);
+#if LINUX_VERSION_CODE < KERNEL_VERSION(2, 6, 35)
+int lirc_dev_fop_ioctl(struct inode *inode, struct file *file,
+			unsigned int cmd, unsigned long arg);
+#else
+long lirc_dev_fop_ioctl(struct file *file, unsigned int cmd, unsigned long arg);
+#endif
+ssize_t lirc_dev_fop_read(struct file *file, char *buffer, size_t length,
+			  loff_t *ppos);
+ssize_t lirc_dev_fop_write(struct file *file, const char *buffer, size_t length,
+			   loff_t *ppos);
+
 #endif
-- 
1.7.0.1

